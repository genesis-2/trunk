package edu.virginia.vcgr.genii.container.queue.resource;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import edu.virginia.vcgr.genii.client.resource.ResourceException;
import edu.virginia.vcgr.genii.container.db.DatabaseConnectionPool;
import edu.virginia.vcgr.genii.container.resource.IResource;
import edu.virginia.vcgr.genii.container.resource.ResourceKey;
import edu.virginia.vcgr.genii.container.resource.db.BasicDBResourceFactory;

public class QueueDBResourceFactory extends BasicDBResourceFactory
{
	static private final String []_CREATE_STMTS = new String[] {
		"CREATE TABLE queueresources " +
			"(queueid VARCHAR(256), resourceid INTEGER," +
			"CONSTRAINT queueconstraint1 PRIMARY KEY (queueid, resourceid))",
		"CREATE TABLE queueresourceinfo " +
			"(resourceid INTEGER GENERATED BY DEFAULT AS IDENTITY," +
			"resourcename VARCHAR(128), endpoint BLOB(128K)," +
			"totalslots INTEGER," +
			"CONSTRAINT queueconstraint2 PRIMARY KEY (resourceid))",
		"CREATE TABLE queuejobs " +
			"(queueid VARCHAR(256), jobid BIGINT," +
			"CONSTRAINT queueconstraint3 PRIMARY KEY (queueid, jobid))",
		"CREATE TABLE queuejobinfo " +
			"(jobid BIGINT GENERATED BY DEFAULT AS IDENTITY," +
			"callingcontext BLOB (128K), jobticket VARCHAR(256)," +
			"jsdl VARCHAR (8192) FOR BIT DATA, state VARCHAR(64), priority INTEGER," +
			"submittime TIMESTAMP, starttime TIMESTAMP, finishtime TIMESTAMP," +
			"failedattempts INTEGER," +
			"CONSTRAINT queueconstraint4 PRIMARY KEY (jobid))",
		"CREATE TABLE queuejobowners " +
			"(oid BIGINT GENERATED BY DEFAULT AS IDENTITY," +
			"jobid BIGINT, owner VARCHAR (8192) FOR BIT DATA," +
			"CONSTRAINT queueconstraint5 PRIMARY KEY (oid))",
		"CREATE TABLE queueactivejobs " +
			"(queueid VARCHAR(256), jobid BIGINT, resourceid INTEGER," +
			"jobendpoint BLOB(128K)," +
			"CONSTRAINT queueconstraint6 PRIMARY KEY (queueid, jobid))",
		"CREATE TABLE queuedynamicresourceinfo " +
			"(resourceid INTEGER, available INTEGER," +
			"CONSTRAINT queueconstraint7 PRIMARY KEY (resourceid))",
		"CREATE VIEW queuebigquerypiece1 AS SELECT qinfo.resourceid, qinfo.endpoint, big.slotsavail FROM " +
			"queueresourceinfo AS qinfo " +
			"INNER JOIN " +
			"(SELECT res.resourceid, (res.totalslots - active.used) AS slotsavail FROM queueresourceinfo AS res " +
				"INNER JOIN (SELECT resourceid, COUNT(*) AS used FROM queueactivejobs GROUP BY resourceid) AS active ON res.resourceid = active.resourceid UNION SELECT res.resourceid, res.totalslots AS slotsavail FROM queueresourceinfo AS res LEFT JOIN queueactivejobs as active ON res.resourceid = active.resourceid WHERE active.resourceid IS NULL) AS big ON qinfo.resourceid = big.resourceid"
/* This query doesn't work
		"CREATE VIEW queuebigquerypiece1 AS SELECT res.resourceid, res.endpoint, " +
				"(res.totalslots - active.used) AS slotsavail FROM queueresourceinfo AS res " +
			"INNER JOIN " +
				"(SELECT resourceid, COUNT(*) AS used FROM queueactivejobs GROUP BY resourceid) AS active " +
			"ON res.resourceid = active.resourceid " +
			"UNION " +
				"SELECT res.resourceid, res.endpoint, res.totalslots AS slotsavail FROM queueresourceinfo AS res " +
			"LEFT JOIN queueactivejobs as active " +
			"ON res.resourceid = active.resourceid WHERE active.resourceid IS NULL"
*/
	};
	
	public QueueDBResourceFactory(DatabaseConnectionPool connectionPool)
		throws SQLException
	{
		super(connectionPool);
	}
	
	public IResource instantiate(ResourceKey parentKey) throws ResourceException
	{
		try
		{
			return new QueueDBResource(parentKey, _pool);
		}
		catch (SQLException sqe)
		{
			throw new ResourceException(sqe.getLocalizedMessage(), sqe);
		}
	}
	
	protected void createTables() throws SQLException
	{
		Connection conn = null;
		Statement stmt = null;
		
		super.createTables();
		
		try
		{
			conn = _pool.acquire();
			stmt = conn.createStatement();
			
			for (String createStmt : _CREATE_STMTS)
			{
				stmt.executeUpdate(createStmt);
			}
			conn.commit();
		}
		catch (SQLException sqe)
		{
//			 assume the table already exists.
		}
		finally
		{
			if (stmt != null)
				try { stmt.close(); } catch (SQLException sqe) {}
			if (conn != null)
				_pool.release(conn);
		}
	}
	
	public DatabaseConnectionPool getConnectionPool()
	{
		return _pool;
	}
}
